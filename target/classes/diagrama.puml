@startuml
' =========
' Class Definitions
' =========

abstract class Daddy {
---
Atributes
---
    #String name
    #Daddy parent
    #boolan isTask
    #Time startTime
    #Time endTime
    #float totalTime
    #DateTimeFormatter formatter
    #int id
    #int idCounter
---
Methods
---
    -void getNewID()
    +boolean isTask()
    +void display()
    +boolean isActive()
    +float calculateTotalTime()
    +JSONObject getJSON()
    +void loadJSON(JSONObject json)
}

class Task {
---
Atributes
---
    -int ticks
    -boolean active
    -boolean done
---
Methods
---
    +void start(SingletonClock clock)
    +void stop(SingletonClock clock)
    +void finishTask()
}

class Project {
---
Methods
---
    +Daddy getChildByName(String name)
    +void createNewTask(String name)
    +void createNewProject(String name)
    +void deleteChild(Daddy daddy)
}

class TimeRange {
---
Atributes
---
    -DateTime startDatetime
    -DateTime stopDatetime
    -float totalTime
---
Methods
---
    +float calculateTotalTime()
    +void display(DateTimeFormatter formatter)
    +JSONObject getJSON(DateTimeFormatter formatter)
    +void loadJSON(JSONObject json, DateTimeFormatter formatter)
}

class Client {
---
Atributes
---
    -Daddy root
---
Methods
---
    +Daddy getRoot()
}



class SingletonClock {
---
Atributes
---
    -Timer clock
    -<u>SingletonClock instance
    -LocalDateTime localdatetime
    -<u>int period
---
Methods
---
    +void startTimer()
    +void tick()
    +SingletonClock GetInstance()
}

' =========
' External Packages
' =========

package java.utils <<frame>> {
    class Observable {
    ---
    Methods
    ---
        +void addObserver(Observer observer)
        +void deleteObserver (Observer observer)
        +void notifyObservers()
    }

    interface Observer {
    ---
    Methods
    ---
        +void update()
    }

    Observable "1" o--> "0..*" Observer
}
' =========
' Relations
' =========

Client "1" -- "1" Project
Project --|> Daddy
Project "1" *-- "0..*" Daddy
Task --|> Daddy
Task ..|> Observer
TimeRange "0..*" --* "1" Task
SingletonClock "1" --|> "1"Observable
@enduml